{"version":3,"sources":["component/Product.js","actions/productActions.js","actions/types.js","component/ProductList.js","component/Home.js","component/Cart.js","component/NotFound.js","component/Navbar.js","reducers/productReducers.js","reducers/index.js","store/index.js","app.js","serviceWorker.js","index.js"],"names":["connect","state","prevState","products","items","addToCart","id","dispatch","tempProduct","product","find","item","inCart","count","type","payload","Object","toConsumableArray","cart","props","react_default","a","createElement","className","name","price","desc","onClick","e","ProductList","this","fetchProducts","Fragment","map","index","component_Product","assign","key","Component","dataStore","Home","component_ProductList","Cart","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handlePlus","tempCart","selectedProduct","setState","calculateTotal","handleMinus","total","bind","assertThisInitialized","_this2","react","NotFound","totalCart","length","react_router_dom","to","initialState","combineReducers","arguments","undefined","action","objectSpread","newCart","concat","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","component_Navbar","react_router","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b59d1911.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {addToCart} from \"../actions//productActions\"\r\nconst Product = (props) => {\r\n  return (\r\n    <div className=\"col-md-3\">\r\n     <div className=\"card\">\r\n      <div className=\"card-body\">\r\n       <h1>{props.name}</h1>\r\n       <h5 className=\"text\">Rp.{props.price}</h5>\r\n       <p className=\"text\">{props.desc}</p>\r\n        {props.inCart ? <button className=\"btn btn-danger mt-3\">in Cart</button> :  <button className=\"btn btn-primary mt-3\" onClick={ (e) => props.addToCart(props.id,props.prevState)}>Add to cart</button> } \r\n      </div>\r\n     </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps  = (state) => {\r\n  return {\r\n    prevState : state.products.items\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {addToCart})(Product);","import {FETCH_PRODUCTS,ADD_TO_CART,CLEAR_CART} from \"./types\"\r\nimport dataStore from \"../data/data\"\r\n\r\nexport const fetchProducts = () => (dispatch) => {\r\n let product = dataStore.product\r\n return dispatch({\r\n  type : FETCH_PRODUCTS,\r\n  payload : product\r\n });\r\n};\r\n\r\nexport const addToCart = (id,prevState) => (dispatch) => {\r\n  const tempProduct = prevState;\r\n  const product = tempProduct.find(item => item.id === id);\r\n  product.inCart = true;\r\n  product.count  = 1;\r\n    dispatch({\r\n     type : ADD_TO_CART,\r\n     payload : {\r\n      \"product\" : [...tempProduct],\r\n      \"cart\" : product\r\n     }\r\n    })\r\n}\r\n\r\nexport const clearCart = () => (dispatch) => {\r\n  return dispatch({\r\n    type : CLEAR_CART,\r\n    payload : []\r\n  })\r\n}","export const FETCH_PRODUCTS = 'FETCH_PRODUCTS';\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const CLEAR_CART = 'CLEAR_CART';\r\n","import React,{Component} from 'react';\r\nimport Product from './Product'\r\nimport {connect} from 'react-redux'\r\nimport { fetchProducts } from \"../actions/productActions\"\r\nclass ProductList extends Component{\r\n \r\n \r\n componentWillMount() {\r\n   this.props.fetchProducts();\r\n }\r\n\r\n render () {\r\n  return (\r\n   <>\r\n   <h1>From ProductList</h1>\r\n   <div className=\"row\">\r\n     {\r\n      this.props.products.map((product,index) => {\r\n       return <Product key={index} {...product} />\r\n      })\r\n     }\r\n   </div>\r\n   </>\r\n  )\r\n }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    products : state.products.items\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,{ fetchProducts })(ProductList);","import React,{Component} from 'react';\r\nimport ProductList from \"./ProductList\"\r\nclass Home extends Component{\r\n render () {\r\n  return  (\r\n   <ProductList />\r\n  )\r\n }\r\n}\r\n\r\nexport default Home;","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Cart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cart: this.props.cart,\r\n      total: 0\r\n    };\r\n    this.handlePlus = this.handlePlus.bind(this);\r\n    this.handleMinus = this.handleMinus.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.calculateTotal();\r\n  }\r\n\r\n  handlePlus = id => {\r\n    const tempCart = [...this.state.cart];\r\n    const selectedProduct = tempCart.find(item => item.id === id);\r\n    if (selectedProduct.count > 0) {\r\n      selectedProduct.count += 1;\r\n    }\r\n    this.setState(\r\n      {\r\n        cart: tempCart\r\n      },\r\n      () => {\r\n        this.calculateTotal();\r\n      }\r\n    );\r\n  };\r\n\r\n  handleMinus = id => {\r\n    const tempCart = [...this.state.cart];\r\n    const selectedProduct = tempCart.find(item => item.id === id);\r\n    if (selectedProduct.count > 1) {\r\n      selectedProduct.count -= 1;\r\n    }\r\n    this.setState(\r\n      {\r\n        cart: tempCart\r\n      },\r\n      () => {\r\n        this.calculateTotal();\r\n      }\r\n    );\r\n  };\r\n\r\n  calculateTotal = () => {\r\n    let { cart } = this.state;\r\n    let total = 0;\r\n    cart.map(items => {\r\n      return (total += items.price * items.count);\r\n    });\r\n    this.setState({\r\n      total\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h1>From cart</h1>\r\n        <table className='table table-bordered'>\r\n          <thead>\r\n            <tr>\r\n              <td>Name</td>\r\n              <td>Price</td>\r\n              <td>Qty</td>\r\n              <td>Grandtotal</td>\r\n              <td>Action</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.cart.map((product, index) => {\r\n              return (\r\n                <tr key={index}>\r\n                  <td>{product.name}</td>\r\n                  <td>{product.price}</td>\r\n                  <td>{product.count}</td>\r\n                  <td>{product.price * product.count}</td>\r\n                  <td>\r\n                    <button\r\n                      className='btn btn-primary'\r\n                      onClick={e => this.handlePlus(product.id)}\r\n                    >\r\n                      +\r\n                    </button>{' '}\r\n                    <button\r\n                      className='btn btn-danger'\r\n                      onClick={e => this.handleMinus(product.id)}\r\n                    >\r\n                      -\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n\r\n        <h2>Total : {this.state.total}</h2>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cart: state.products.cart\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Cart);\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n   <h1>404, Notfound</h1>\r\n  )\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nconst Navbar = (props) => {\r\n return (\r\n  <div className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div className=\"container\">\r\n     <span className=\"navbar-brand\">E-COMMERCE APP</span>\r\n     <ul className=\"navbar-nav mr-auto\">\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" to=\"/\">Beranda</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link\" to=\"/cart\">Keranjang belanja  <span className=\"badge badge-dark\">{props.totalCart}</span></Link>\r\n      </li>\r\n     </ul>\r\n    </div>\r\n  </div>\r\n )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    totalCart : state.products.cart.length\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar);\r\n","import { FETCH_PRODUCTS,ADD_TO_CART,CLEAR_CART} from \"../actions/types\";\r\nconst initialState = {\r\n items : [],\r\n cart     : []\r\n}\r\n\r\nexport default (state = initialState,action) => {\r\n  switch(action.type){\r\n   case FETCH_PRODUCTS:\r\n    return {\r\n      ...state,\r\n      items : action.payload\r\n    } \r\n   case ADD_TO_CART:\r\n    let newCart = state.cart;\r\n    newCart = [...newCart,action.payload.cart]\r\n    return  {\r\n      ...state,\r\n      items : action.payload.product,\r\n      cart  : newCart\r\n    }\r\n   case CLEAR_CART:\r\n    return {\r\n      ...state,\r\n      cart : action.payload\r\n    }\r\n   default:\r\n   return state;\r\n  }\r\n}","import  { combineReducers } from \"redux\";\r\nimport productReducers from \"./productReducers\";\r\n\r\nexport default combineReducers({\r\n  products : productReducers\r\n});","import {createStore,applyMiddleware,compose} from \"redux\";\r\nimport  rootReducer  from \"../reducers/index\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst middleware = [thunk];\r\nconst initialState = {};\r\n\r\nconst store = createStore(\r\n rootReducer,\r\n initialState,\r\n compose(\r\n  applyMiddleware(...middleware),\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n )\r\n)\r\n\r\nexport default store;","import React,{Component,Fragment} from 'react';\r\nimport {BrowserRouter as Router,Route,Switch} from 'react-router-dom'\r\nimport Home from \"./component/Home\"\r\nimport Cart from \"./component/Cart\"\r\nimport NotFound from \"./component/NotFound\"\r\nimport Navbar from './component/Navbar'\r\nimport \"./bootstrap.min.css\"\r\nimport {Provider} from \"react-redux\"\r\nimport store from \"./store/index\"\r\n\r\nclass App extends Component{\r\n  \r\n render() {\r\n   return (\r\n     <Provider store={store}>\r\n      <Router>\r\n          <Fragment>\r\n            <Navbar />\r\n            <div className=\"container\">\r\n              <Switch>\r\n                <Route path=\"/\" exact component={Home} />  \r\n                <Route path=\"/cart\" component={Cart} /> \r\n                <Route path=\"*\" component={NotFound} /> \r\n              </Switch>\r\n            </div>\r\n          </Fragment>   \r\n        </Router>\r\n     </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from  './app';\nimport * as serviceWorker from './serviceWorker';\n//store tempat menyimpan state yang paling tinggi\n\n\n// ReactDOM.render(<Provider store={store} ><Home /></Provider>, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}